#!/bin/bash

DEFAULT="https://unicode.org/Public/emoji/1.0/emoji-data.txt"
DEFAULT_MAPPER="__defaultFilter"
SUPPORTED_CLIPBOARDS=(
    pbcopy
    xsel
    xclip
    lemonade
    doitclient
    tmux
)

# Parse options
while getopts ":s:" OPT
do
  case $OPT in
      s)
          OPTION_VALUE="$OPTARG"
          ;;
      *)
          OPTION_VALUE="$DEFAULT"
  esac
done
shift $((OPTIND - 1))

__getUrlAndMapper(){
    local _OP=$1
    case "$_OP" in
        luke)
            URL="https://raw.githubusercontent.com/LukeSmithxyz/voidrice/master/.emoji"
            MAPPER="__lukeFilter"
            ;;
        *)
            URL="$DEFAULT"
            MAPPER="$DEFAULT_MAPPER"
            ;;
    esac
}

__getSource(){
    local URL URL_DASHED FILE_PATH

    mkdir -p ~/.emojis

    URL=$1
    URL_DASHED=$(tr '/' '-' <<<"${URL#*//}")

    FILE_PATH="${HOME}/.emojis/${URL_DASHED}"

    if [ -f "$FILE_PATH" ]
    then
        cat "$FILE_PATH"
    else
        curl -s "$URL" | tee "$FILE_PATH"
    fi
}

__getClipboard(){
    local CLIP GOOD
    for CLIP in ${SUPPORTED_CLIPBOARDS[*]}
    do
        GOOD=$(command -v "$CLIP")
        if [ -n "$GOOD" ]
        then
            echo "$CLIP"
            break
        fi
    done
}

__toClipboard(){
    local CLIP RETURN_VALUE
    CLIP=$(__getClipboard)
    if [ $# -eq 0 ]
    then
        read -rs RETURN_VALUE
    else
        RETURN_VALUE=$1
    fi
    if [ -z "$RETURN_VALUE" ]
    then
        echo "[Error] You tried to copy \"Empty String\" to the clipboard"
        return 1
    fi
    CLIP=klk
    case "$CLIP" in
        tmux)
            if tmux set-buffer "$RETURN_VALUE"
            then
                echo "$RETURN_VALUE : Copied to TMUX Clipboard"
            else
                echo "TMUX Server might be not running"
            fi
            ;;
        *)
            echo "$RETURN_VALUE : Not copied to Clipboard"
            echo -e "\nCheck the script to see the supported clipboards"
            ;;
    esac
}

__defaultFilter(){
    __getSource "$1" \
        | grep -v "^#" \
        | cut -d'#' -f2 \
        | cut -d' ' -f3- \
        | fzf \
        | sed -r 's/.*\((.*)\).*/\1/g'
}

__lukeFilter(){
    __getSource "$1" \
        | cut -d';' -f1 \
        | fzf \
        | cut -d' ' -f1
}

__getUrlAndMapper "$OPTION_VALUE"

EMOJI=$(eval "$MAPPER $URL")

[ -n "$EMOJI" ] && __toClipboard "$EMOJI"

