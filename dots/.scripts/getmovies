#!/bin/bash -e

# Script to fetch movies *aarrgs*

# Usage:
# getmovies [OPTION]... [PART_OF_THE_MOVIE_NAME]...

# Options:
# -m      Gets movies metadata
# -q      Gets movies ID(s)
# -v      Open vlc player for the first movie (If it finds more than one)

DEPENDENCIES=(
    jq
)

function __check_dependencies {
    local IFS COMMAND SHOULD_RETURN
    IFS=$''
    for COMMAND in ${DEPENDENCIES[*]}; do
        if ! command -v "$COMMAND" > /dev/null
        then
            echo -e "\`$COMMAND\` not installed. Please install and re-run the script.\n"
            SHOULD_RETURN=1
        fi
    done
    if [ $SHOULD_RETURN ]; then
        echo "Bai ¯\\_(ツ)_/¯" 1>&2
        exit 1
    fi
}

function __create_match_case {
    # Creates match case for `jq`
    local TEMPLATE WORD RESULT
    TEMPLATE="match(\"+foo+\";\"i\")"
    for WORD in "$@"
    do
        if [ -z "${RESULT[0]}" ]
        then
            RESULT=("|")
        elif [ ${#RESULT[*]} -gt 1 ]
        then
            RESULT+=(and)
        fi
        WORD="$(sed "s/+foo+/$WORD/" <<<"$TEMPLATE")"
        RESULT+=("$WORD")
    done
    echo "${RESULT[*]}"
}

function __get_ids {
    local OBJECT_FILTER ARRAY_FILTER
    OBJECT_FILTER="| {_id}"
    ARRAY_FILTER="| .[]"
    grep _id |
        cut -d':' -f2 |
        tr -d ' ",'
}

function __fetch_movies {
    spinner curl -s "$GET_MOVIES_ENDPOINT"
}

function __fetch_movie {
    spinner curl -s "${GET_MOVIES_ENDPOINT}/$1"
}

function __filter_by_title {
    #shellcheck disable=2086
    jq ${JQ_OPTIONS} "map(select(.title $MATCH_CASE) ${OBJECT_FILTER}) $ARRAY_FILTER"
}

function __filter_content {
    #shellcheck disable=2086
    jq ${JQ_OPTIONS} '{title: .title, link: .content[0].link}'
}

function __open_vlc {
    #shellcheck disable=2086
    jq ${JQ_OPTIONS} '.[0].link' | xargs vlc
}

function fetch_movies_by_title {
    __fetch_movies | __filter_by_title
}

function fetch_movies_content {
    local IDS JQ_OPTIONS
    IDS=$(fetch_movies_by_title "$@" | __get_ids)
    for ID in $IDS
    do
        __fetch_movie "$ID" | __filter_content
    done | jq -s
}

# Parse options
while getopts ":qmv" OPT
do
    case $OPT in
        m) MAPPER='fetch_movies_by_title $@' ;;
        q) MAPPER='fetch_movies_by_title $@ | __get_ids' ;;
        v)
            DEPENDENCIES+=(vlc)
            MAPPER='fetch_movies_content  $@ | __open_vlc'
            ;;
        *) echo "Invalid option ($OPTARG)" ;;
    esac
done
shift $((OPTIND - 1))

__check_dependencies

if [ -z "$GET_MOVIES_ENDPOINT" ]; then
    echo "
No \$GET_MOVIES_ENDPOINT variable set...

set in your ~/.bashrc

export GET_MOVIES_ENDPOINT=<movies-api-endpoint>
    " 1>&2
    exit 1
fi

if [ $# -eq 0 ]
then
    echo "Enter a movie name..." 1>&2
    exit 1
fi

# Construct the match cases for JQ
MATCH_CASE="$(__create_match_case "$@")"

eval "${MAPPER:-fetch_movies_content $@}"
